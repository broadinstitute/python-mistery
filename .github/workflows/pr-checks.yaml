---
name: 'pr-checks'

'on':
  pull_request:
    branches: ['*']

jobs:
  pre-commit:

    runs-on: 'ubuntu-latest'

    steps:
      - name: 'Checkout repo'
        uses: 'actions/checkout@v2'

      - name: 'Git setup'
        run: |
          git fetch --no-tags --prune origin +refs/heads/*:refs/remotes/origin/*
          git checkout ${{ github.base_ref }}
          git checkout ${{ github.head_ref }}

      - name: 'Set up Python'
        uses: 'actions/setup-python@v1'
        with:
          python-version: 3.8

      - name: 'Get full python version'
        id: 'pyver'
        run: |
          echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: 'Get pip cache dir'
        id: 'pip-cache'
        run: |
          pip --version
          pip install -U pip
          echo "::set-output name=dir::$(pip cache dir)"

      - name: 'Cache pip'
        uses: 'actions/cache@v1'
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-v1-pip-${{ steps.pyver.outputs.version }}
          restore-keys: |
            ${{ runner.os }}-v1-pip-

      - name: 'Install pre-commit'
        run: 'pip install pre-commit'

      - name: 'Cache pre-commit'
        uses: 'actions/cache@v1'
        with:
          path: ' ~/.cache/pre-commit'
          key: ${{ runner.os }}-v1-pre-commit-${{ steps.pyver.outputs.version }}-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            ${{ runner.os }}-v1-pre-commit-

      - name: 'Run pre-commit'
        run: 'pre-commit run --from-ref ${{ github.base_ref }} --to-ref ${{ github.head_ref }}'

  unit-tests:

    runs-on: 'ubuntu-latest'

    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8]

    steps:
      - name: 'Checkout repo'
        uses: 'actions/checkout@v2'

      - name: Set up Python ${{ matrix.python-version }}
        uses: 'actions/setup-python@v1'
        with:
          python-version: ${{ matrix.python-version }}

      - name: 'Install pip and Poetry'
        run: |
          python -m pip install --upgrade pip poetry
          poetry config virtualenvs.in-project true

      - name: Get full python version
        id: 'pyver'
        run: |
          echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: 'Cache poetry'
        uses: 'actions/cache@v1'
        with:
          path: '.venv'
          key: venv-${{ runner.os }}-${{ steps.pyver.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: 'Install dependencies'
        run: 'poetry install'

      - name: 'Test with green'
        # test with one test for now
        run: |
          poetry run green tests
          poetry run coverage xml

    #   - name: 'Upload code coverage to Codecov'
    #     uses: 'codecov/codecov-action@v1'
    #     with:
    #       token: ${{ secrets.CODECOV_TOKEN }}  # not required for public repos
    #       file: './coverage.xml'
    #       flags: 'unittests'
